<h2>Making options research a bit easier</h2>
<br/>
<br/>
<h4><strong>The need...</strong></h4>
<h5>Options trading is lucrative, yet quite risky. But with the right systems, knowledge and discipline, it can be extremely rewarding. While, there is no dearth of information available on options on the internet, I could not find the right tools to identify rewarding opportunities. This is unlike analyzing stocks for which a ton of tools exist. Perhaps because analyzing options data is hard? 
</h5>
<br/>

<h4><strong>20X return with a MVP!</strong></h4>
<h5>I started off by writing code in Python in my free time to extract option chain data from <a href="https://developer.tradier.com/?_ga=2.205091544.91925921.1609509599-44992050.1605369800" target="_blank">Tradier</a> and developed algorithms to find "winning scenarios". Over weekends, I would pick a few of those scenarios and place trades on my brokerage platform. But the code was slow, did not have a front-end and was difficult to scale. Sometimes it took me 5 minutes to analyze just a single company's option chain. Although, using this Python MVP I did found some amazing low-risk high-reward opportunities that led to 20X returns on investment in just a month! Yes, 20X, albeit on a very small principal. My losses were capped low too. So I decided to build on this idea by developing a web application with an easy-to-use frontend and a scaleable backend - something I could use on my phone or wherever, and not have to spend hours infront of a computer compiling code. I also had my eyes on building something that others could use to make options trading research easy. </h5> <br/>

<h4><strong>Learning new technologies to solve tough problems...</strong></h4>
<h5>For a long time, I had been hearing about <a href="https://rubyonrails.org/" target="_blank">Ruby on Rails</a> and being a fan of <a href="https://shopify.engineering/e-commerce-at-scale-inside-shopifys-tech-stack" target="_blank">Shopify's technology </a> (which is also built on Rails), I decided to give it a shot. After all, Rails claims it is optimized for programmer happiness. What more could I ask for?<br/>
The 2020-stuck-at-home-December-holidays provided the perfect opportunity to learn and create something new. I found a very nice <a href="https://www.udemy.com/course/ruby-on-rails-stock-market-app/" target="_blank"> tutorial on Udemy</a>  by John Elder, where he walks you step by step creating a simple <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete" target="_blank">CRUD</a> app.<br/><br/>  Very soon, I was off to the races. My #1 focus was on creating an architecture that can scale. The app needs to query the entire option chain universe for NYSE and NASDAQ, which is about <strong>1.5 million records</strong>. Rinse and repeat every hour. Add to that all the analyses that needs to happen on the millions of data points to find winning scenarios. That's a lot of processing work. As a developer, it is all about tradeoffs and I found some great insights on Heroku's dev center on the power of <a href="https://devcenter.heroku.com/articles/background-jobs-queueing" target="_blank">background jobs</a> which I ended up leveraging quite a bit for some serious data heavy lifting. There were numerous junctures, where I had to decide between an additional 0.2 seconds page loading time and a 30 minutes background job that could pre-process the data. I am also an avid believer of power of simple UI/UX, so my goal was to create an app that is responsive, seamless to navigate and doesn't get in the way of the user. Ready-made UI elements from <a href="https://getbootstrap.com/" target="_blank">Bootstrap</a> to the rescue! And finally, the meat of the code - the algorithms, models and classes. Ruby, like Python, is programmer friendly and it was not very hard to re-write most of it. Ruby is very object oriented, which is a big plus. I ended up creating a few more features to scan the entire option market at one go, instead of a per-security basis. Finally, I used <a href="https://www.heroku.com/home" target="_blank">Heroku's cloud</a> for hosting the app. I like Heroku because of its scaleable web and worker <a href="https://www.heroku.com/dynos" target="_blank">'dynos'</a> and built-in Postgresql database (which I ended up buying more capacity to store millions of rows of raw option chain data). It is amazing how powerful cloud platforms have become - so easy to setup, cheap (relatively speaking) and extremely elastic (ramp up or down as needed). </h5><br/>

<h4><strong>Launch and beyond...</strong></h4>
<h5>
On Christmas of 2020, after 5 days since my first Ruby on Rails course, I launched the first version of <a href="http://winningspreads.com/" target="_blank">Winning Spreads app</a> and I have been using it every day since. I probably pushed 20 more updates in the following week adding more features and improvements. Winning Spreads. Why this name? Well, my favorite type of option strategy is a spread, particularly a <a href="https://www.optionseducation.org/strategies/all-strategies/bull-call-spread-debit-call-spread" target="_blank">call debit spread</a> which I believe is one of the safest strategies, and has a higher probability of winning. Also, the domain was available on <a href="https://www.namecheap.com/" target="_blank">Namecheap</a> for $4/year! I look forward to using the app regularly to learn more about options and hopefully generate some good ROI in trading. I welcome you to beta-test the app if interested and provide feedback. I will be grateful! I have a long list of features planned, which I cannot wait to build! 
</h5>

<br/>

<h5>Cheers to learning and creating! <br/>
Lagnajeet Das</h5>

